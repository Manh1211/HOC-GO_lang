package main

import (
	"fmt"
	"math"
)

//Suqare is a suqare
type Suqare struct {
	Length float64
}

//Area return s the area of the square
func (s *Suqare) Area() float64 {
	return s.Length * s.Length
}

//Circle is a circle
type Circle struct {
	Radius float64
}

//Area return the curcle og the square
func (c *Circle) Area() float64 {
	return math.Pi * math.Pow(c.Radius, 2)
}

//Shape is a shape interface
type Shape interface {
	Area() float64
}

// sumAreas return the sum of all areas in the slice
func sumAreas(shapes []Shape) float64 {
	total := 0.0
	for _, shape := range shapes {
		total += shape.Area()
	}
	return total
}

func main() {
	s := &Suqare{20}
	fmt.Println(s.Area())

	c := &Circle{10}
	fmt.Println(c.Area())

	shapes := []Shape{s, c}
	sa := sumAreas(shapes)
	fmt.Println(sa)
}
